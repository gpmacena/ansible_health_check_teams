---

# ------------------------------------------------------------
# 1Ô∏è‚É£ Extrair informa√ß√µes b√°sicas do monitor atual
# ------------------------------------------------------------
- name: Extrair nome, URL base e entityId do monitor
  set_fact:
    # Monitor atual (conte√∫do JSON do Dynatrace)
    monitor_item: "{{ monitor_pair.1 }}"

    # Nome da TAG associada ao grupo de monitores
    nome_tag: "{{ monitor_pair.0.item.name }}"

    # Nome do monitor (remove texto entre par√™nteses, se existir)
    nome_monitor: "{{ monitor_pair.1.name | default('Sem Nome') | regex_replace(' \\(.*\\)', '') }}"

    # Extrai a URL base do monitor (sem caminho adicional)
    url_monitor: "{{ (monitor_pair.0.item.url | regex_search('^https?://[^/]+')) | default('N/A') }}"

    # Identificador √∫nico do monitor no Dynatrace
    entity_id: "{{ monitor_pair.1.entityId | default('') }}"

# ------------------------------------------------------------
# 2Ô∏è‚É£ Valida√ß√£o: o entityId √© obrigat√≥rio
# ------------------------------------------------------------
- name: Validar entityId antes de continuar
  fail:
    msg: "Monitor {{ nome_monitor }} n√£o possui entityId v√°lido."
  when: entity_id == ''

# ------------------------------------------------------------
# 3Ô∏è‚É£ Consultar detalhes de execu√ß√£o do monitor via API Dynatrace
# ------------------------------------------------------------
- name: Obter status HTTP via API Dynatrace
  uri:
    # URL da API Dynatrace - substituir {{ dynatrace_url }} pelo endpoint real
    url: "{{ dynatrace_url }}/api/v2/synthetic/execution/{{ entity_id }}/SUCCESS"
    method: GET
    headers:
      Authorization: "Api-Token {{ api_token }}"  # Substituir {{ api_token }} por vari√°vel definida em vars
      Accept: "application/json; charset=utf-8"
    return_content: true
    validate_certs: false  # Defina como true se o Dynatrace tiver certificado v√°lido
  register: resultado_uri
  failed_when: false  # N√£o falhar caso o retorno seja erro HTTP

# ------------------------------------------------------------
# 4Ô∏è‚É£ Extrair c√≥digo HTTP real da resposta
# ------------------------------------------------------------
- name: Extrair status_code real da resposta
  set_fact:
    status_code: >-
      {{
        (
          resultado_uri.json.locationsExecutionResults is defined and
          resultado_uri.json.locationsExecutionResults | length > 0 and
          resultado_uri.json.locationsExecutionResults[0].requestResults is defined and
          resultado_uri.json.locationsExecutionResults[0].requestResults | length > 0 and
          resultado_uri.json.locationsExecutionResults[0].requestResults[0].responseStatusCode is defined
        )
        | ternary(
            resultado_uri.json.locationsExecutionResults[0].requestResults[0].responseStatusCode,
            -1  # Caso n√£o haja c√≥digo, define como -1
        )
      }}

# ------------------------------------------------------------
# 5Ô∏è‚É£ Atualizar dicion√°rio global com resultados
# ------------------------------------------------------------
- name: Atualizar resultados_por_tag
  set_fact:
    resultados_por_tag: >-
      {{
        resultados_por_tag | combine({
          nome_tag: resultados_por_tag.get(nome_tag, {'ok': [], 'erros': [], 'blocos': []}) | combine({

            # Se o c√≥digo HTTP estiver na lista de status OK ‚Üí adiciona √† lista 'ok'
            ((status_code | int) in (status_ok | map('int') | list)) | ternary('ok', 'erros'): (
              resultados_por_tag.get(nome_tag, {'ok': [], 'erros': [], 'blocos': []})[((status_code | int) in (status_ok | map('int') | list)) | ternary('ok', 'erros')] + [
                nome_monitor ~ ' ‚Üí ' ~ url_monitor ~ ' ‚Üí ' ~ (status_code | string)
              ]
            ),

            # Se houver erro ‚Üí adiciona blocos formatados para o Adaptive Card do Teams
            'blocos': (
              ((status_code | int) in (status_ok | map('int') | list))
              | ternary(
                  resultados_por_tag.get(nome_tag, {'blocos': []}).blocos,  # Se OK ‚Üí mant√©m blocos
                  resultados_por_tag.get(nome_tag, {'blocos': []}).blocos + [
                    { 'type': 'TextBlock', 'text': 'üî¥ ' ~ nome_monitor, 'weight': 'Bolder', 'wrap': True },
                    { 'type': 'TextBlock', 'text': 'üåê ' ~ url_monitor, 'spacing': 'Small', 'isSubtle': true },
                    { 'type': 'TextBlock', 'text': '‚ö†Ô∏è HTTP ' ~ (status_code | string) ~ ' ' ~ status_mensagens.get((status_code | string), 'Erro'), 'color': 'Attention', 'wrap': True },
                    { 'type': 'TextBlock', 'text': '---', 'spacing': 'Medium', 'separator': true }
                  ]
                )
            )
          })
        }, recursive=True)
      }}
